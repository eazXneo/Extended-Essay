# importing libraries
import tweepy
from tweepy import OAuthHandler
import json
import face_recognition
import requests
import datetime
 
# authentication 
consumer_key = 'qSkNhPz2u5jN4KVPlqM1lKbrs' 
consumer_secret = '5KwXaIDBdPSvnXH1ToIluSXOmqqa2V5VGwTS6UAKn9Ge3Raj9U' 
access_token = '962283185697673216-Lrgp2PVWWNSgMmzxnzb64aR7IZ571nZ' 
access_secret = '0INN1YbHMaJfmzbHGjavGOqyxS3cr1UzDk4fw3XV0yeqv'
 
auth = OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_secret)

# API setup 
api = tweepy.API(auth)

### create dataset for this program (20 acoounts) from hashtag
accounts_list = []
list_len = 0
for tweet in tweepy.Cursor(api.search,q="#unitedAIRLINES",count=20,lang="en",since="2018-10-20").items():
    #print (tweet.created_at, tweet.text)
    #print(tweet)
    for_id = tweet._json
    #print(for_id)
    #print('\n', for_id['user'])
    usc = for_id['user']['screen_name']

    uid = for_id['user']['id']
    accounts_list.append([uid,usc])
    list_len = list_len + 1
    if list_len == 20:
        #print(accounts_list)
        break
    else:
        continue

'''
still to be done!!!
either manually or with fancy coding
'''
### but fancy coding will also output the results in a nicer fashion

#######################################################################
### OHMYGOODNESS IT WORKS!!!
#######################################################################

### need to understand the weighting.
'''
at the moment a basic tally will be used
'''
# for calculating the chance of bot
bot_counter = 0
'''
#--1 : check if verified
#--2 : 0.4 tweet & retweet frequency (average activity?)
#--3 : 0.2 more followers to following ratio
#--4 : 0.1 bio
#--4.5: 0.05 name analysis (matching with screen_name)
#--5 : 0.05 check following people
#--6 : 0.2 face recognition for profile image
'''
# so that program stops running if verified.
    
for x in range(0, len(accounts_list)):
    bot_counter = 0
    #try:
    testing = True

    twitter_id = accounts_list[x][0]
    user_id = accounts_list[x][0]
    twitter_handle = accounts_list[x][1]
    # test on Obama
    user_info = api.get_user(twitter_id, user_id, twitter_handle)._json
    #print("\n","\n",user_info)
    ### so there needs to be a way of extracting the id thing before it is inputed here.

    #--1 check if verified
    verification_status = user_info['verified']
    #print("\nVerifification status: ", verification_status)
    #print(type(verification_status))
    if verification_status == True:
        #print("\nDefinitely not a bot")
        # uncomment this!
        continue
        #print("\'continue\'")

    ## bot creation date
    
    #date_joined = user_info['created_at']
    #print("\nCreation date:", date_joined)
    #print(type(date_joined))
    ###Â needs to process this info
    #### bot created in ... timeframe --> bot
    ###'''
    ### this needs more research

    # might be a problem here

    #--2 tweet & retweet frequency (average activity?)
    total_tweets = user_info['statuses_count']
    #print("\nTweets & retweets total:", total_tweets)
    #print(type(total_tweets))
    date_joined = user_info['created_at']
    #print("Creation date:", date_joined)
    #print(type(date_joined))
    # calculate length user / total tweets.
    '''
    turn the string of date joined into some int. 
    manage the time issues. 
    and calculate
    '''
    current_time = str(datetime.datetime.now())
    #print(type(current_time))
    #print(current_time)
    year_c = int(current_time[:4])
    #print(year_c)
    month_c = int(current_time[5:7])
    #print(month_c)
    day_c = int(current_time[8:10])
    #print(day_c)
    current_date = datetime.date(year_c, month_c, day_c)
    #print(current_date)
    year_j = int(date_joined[-4:])
    #print(year_j)
    month_j = 0
    month_extract = date_joined[4:7]
    #print(month_extract)
    if month_extract == 'Jan':
        month_j = 1
    elif month_extract == 'Feb':
        month_j = 2
    elif month_extract == 'Mar':
        month_j = 3
    elif month_extract == 'Apr':
        month_j = 4
    elif month_extract == 'May':
        month_j = 5
    elif month_extract == 'Jun':
        month_j = 6
    elif month_extract == 'Jul':
        month_j = 7
    elif month_extract == 'Aug':
        month_j = 8
    elif month_extract == 'Sep':
        month_j = 9
    elif month_extract == 'Oct':
        month_j = 10
    elif month_extract == 'Nov':
        month_j = 11
    elif month_extract == 'Dec':
        month_j = 12
        #print('help!')
    #print(month_extract)
    #print(month_j)
    day_j = int(date_joined[8:10])
    #print(day_j)
    joined_date = datetime.date(year_j, month_j, day_j)
    #print(joined_date)
    example_time = '2018-10-24 00:00:53.988735'
    time_difference = str(current_date - joined_date)
    #print("!!!", time_difference)
    if time_difference == '0:00:00':
        #print("Bot is one day old.")
        tweets_per_day = total_tweets
    else:
        make_string = str(time_difference)
        days_extracted = make_string[0]
        for j in range(1, len(make_string)):
            index = make_string[j]
            if type(index) == int:
                days_extracted = days_extracted + str(index)
            else:
                break
        days_on_twitter = int(days_extracted)
        #print(days_on_twitter)
        tweets = total_tweets
        tweets_per_day = tweets / days_on_twitter
        #print("!!!!!!!!!", tweets_per_day)
    # breathe
    if tweets_per_day >= 24:
        #print("botpoint")
        bot_counter = bot_counter + 0.4
        #print("Bot counter:", bot_counter)
    #else:
        #print("continue")
        #print("Bot likelihood:", bot_counter)

    #--3 more followers to following ratio
    followers = user_info['followers_count']
    #print("\nFollowers:", followers)
    #print(type(followers))
    following = user_info['friends_count']
    #print("Following:", following)
    #print(type(following))
    if following > followers:
        bot_counter = bot_counter + 0.2
        #print("Suspicious element detected.")
        #print("Bot likelihood:", bot_counter)
    #else:
        #print("Bot likelihood:", bot_counter)

    #--4 bio
    bio = user_info['description']
    #print("\nBio:", bio)
    #print(type(bio))
    if bio == "":
        bot_counter = bot_counter + 0.1
        #print("Suspicious element detected.")
        #print("Bot likelihood:", bot_counter)
    #else:
        #print("Bot likelihood:", bot_counter)

    
    #--4.5 name analysis (matching with screen_name)
    name = user_info['name']
    #print("\nName:", name)
    #print(type(name))
    for i in range(0, len(name)-1):
        first_name = name
        if name[i] == " ":
            space_index = name[i]
            first_name = name[0:i]
            #print("first_name:", first_name)
            surname = name[i+1:]
            #print("surname:", surname)
        #else:
            #print('trying')
    if first_name in twitter_handle:
        bot_counter = bot_counter
        #print(first_name, "in both twitter handle and given name.")
        #print("Bot likelihood:", bot_counter)
    else:
        #print("Handle and given name do not match")
        bot_counter = bot_counter + 0.05
        #xprint("Bot likelihood:", bot_counter)
    # this is very primitive. Needs more work to be a proper criterion for bot 
    # behaviour
    # add those random number check?
    
    #except tweepy.error.TweepError:
    #    pass
    #finally:
    
    #--5 check following people
    try:
        followers_of_user = api.followers(twitter_id, twitter_handle, user_id)
        length_follower_list = len(followers_of_user)
        print("\nFollowers being analysed...")
        lol = followers_of_user[0]
        print("Type of element", type(lol))
        follower_list = []
        for i in range(0,length_follower_list):
            current_follower = followers_of_user[i]._json
            follower_screen_name = current_follower['screen_name']
            follower_list.append(follower_screen_name)
        print(type(followers_of_user))
        print(length_follower_list)
        print(length_follower_list, "followers:", follower_list)
        # good job!
        # within those accounts check for words 'parody'
        # or 'fan account' in description
        threshhold = len(follower_list) / 2
        suspicious_count = 0
        letter_count = 0
        suspicious_list = []
        for i in range(0, len(follower_list)):
            current_element = follower_list[i]
            for j in range(0, len(current_element)):
                letter = current_element[j]
                if type(letter) == int:
                    letter_count = letter_count + 1
                else:
                    print('cont')
            if letter_count >= 4:
                suspicious_list.append(current_element)
                print("Account found with", letter_count, "letters in its screen name.")
            else:
                print('cont')
        if len(suspicious_list) >= threshhold:
            print(twitter_handle, "has", len(suspicious_list), "suspicious accounts")
            print("This is more than half of a random sample of follwers.")
            print("This makes the accounts a possible bot in a bot network.")
            bot_counter = bot_counter + 0.5
            print("Bot likelihood:", bot_counter)
        else:
            print(twitter_handle, "does not seem to be part of a bot network")
            print("Bot likelihood:", bot_counter)
        # evaluate that this might be a bad heuristic
    except:
        pass
    
    #--6 face recognition for profile image
    try:
        url = user_info['profile_image_url_https']
        #print("\nUser profile image found. URL:", url)
        #print(type(url))
        ### needs to be bigger and higher resolution
        if url[-3:] == "peg":
            to_cut = url[-11:]
            #print(to_cut)
            to_add = '400x400.jpg'
            #print(to_add)
            url_copy = url[:len(url)-11]
            #print(url_copy)
            final_url = url_copy + to_add
            #print(final_url)
        elif url[-3:] == "jpg" or url[-3:] == "png":
            to_cut = url[-10:]
            #print(to_cut)
            to_add = '400x400.jpg'
            #print(to_add)
            url_copy = url[:len(url)-10]
            #print(url_copy)
            final_url = url_copy + to_add
            #print(final_url)
        ### download img from twitter
        r = requests.get(final_url, allow_redirects=True)
        open('profileImageTry.png', 'wb').write(r.content)
        profile_image = 'profileImageTry.png'
        ### then paste & run through face_recognition!!!
        image = face_recognition.load_image_file(profile_image)
        face_locations = face_recognition.face_locations(image)
        #print(type(face_locations))
        #print(face_locations)
        if face_locations == []:
            #print("no faces found")
            bot_counter = bot_counter + 0.2
            #print("Bot likelihood:", bot_counter)
        #else:
            #print("FACE!!!")
            #print("Bot likelihood:", bot_counter)
    except OSError:
        pass

    ### YAAAAAAAAS!!!

    testing = False

    print(x, "...", twitter_handle, ",", bot_counter)

print("YYYYYYAAAAAAAAAAAAASSSSSSS")
# program ends
### make functions for this stuff because multiple accounts but for now gucci
