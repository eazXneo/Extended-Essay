# importing libraries
import tweepy
from tweepy import OAuthHandler
import json
 
# authentication 
consumer_key = 'qSkNhPz2u5jN4KVPlqM1lKbrs' 
consumer_secret = '5KwXaIDBdPSvnXH1ToIluSXOmqqa2V5VGwTS6UAKn9Ge3Raj9U' 
access_token = '962283185697673216-Lrgp2PVWWNSgMmzxnzb64aR7IZ571nZ' 
access_secret = '0INN1YbHMaJfmzbHGjavGOqyxS3cr1UzDk4fw3XV0yeqv'
 
auth = OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_secret)

# API setup 
api = tweepy.API(auth)

### create dataset for this program (50 acoounts) from hashtag
'''
still to be done!!!
either manually or with fancy coding
'''

#######################################################################
### OHMYGOODNESS IT WORKS!!!
#######################################################################

### need to understand the weighting.
'''
at the moment a basic tally will be used
'''
# for calculating the chance of bot
bot_counter = 0
# so that program stops running if verified.
testing = True

twitter_id = 813286
user_id = 813286
twitter_handle = "BarackObama"
# test on Obama
user_info = api.get_user(twitter_id, user_id, twitter_handle)._json
print(user_info)
### so there needs to be a way of extracting the id thing before it is inputed here.

while testing:
    # check if verified
    verification_status = user_info['verified']
    print("\nVerifification status: ", verification_status)
    print(type(verification_status))
    if verification_status == True:
        print("\nDefinitely not a bot")
        # uncomment this!
        # break
    else:
        continue

    # bot creation date
    date_joined = user_info['created_at']
    print("\nCreation date:", date_joined)
    print(type(date_joined))
    ###Â needs to process this info
    '''
    if bot created in ... timeframe --> bot
    '''

    # might be a problem here

    # tweet & retweet frequency (average activity?)
    total_tweets = user_info['statuses_count']
    print("\nTweets & retweets total:", total_tweets)
    print(type(total_tweets))
    ### calculate length user / total tweets.
    '''
    turn the string of date joined into some int. 
    manage the time issues. 
    and calculate
    '''

    # more followers to following ratio
    followers = user_info['followers_count']
    print("\nFollowers:", followers)
    print(type(followers))
    following = user_info['friends_count']
    print("Following:", following)
    print(type(following))
    if following > followers:
        bot_counter = bot_counter + 1
        print("Suspicious element detected.")
        print("Bot likelihood:", bot_counter)
    else:
        print("Bot likelihood:", bot_counter)

    # bio
    bio = user_info['description']
    print("\nBio:", bio)
    print(type(bio))
    if bio == "":
        bot_counter = bot_counter + 1
        print("Suspicious element detected.")
        print("Bot likelihood:", bot_counter)
    else:
        print("Bot likelihood:", bot_counter)

    # name analysis (matching with screen_name)
    name = user_info['name']
    print("\nName:", name)
    print(type(name))
    for i in range(0, len(name)-1):
        first_name = name
        if name[i] == " ":
            space_index = name[i]
            first_name = name[0:i]
            print("first_name:", first_name)
            surname = name[i+1:]
            print("surname:", surname)
    if first_name in name:
        print(first_name, "in both twitter hadle and given name.")
    else:
        print("Handle and given name do not match")
    ### this is very primitive. Needs more work to be a proper criterion for bot behaviour

    # check following people
    followers_of_user = api.friends_ids(twitter_id, twitter_handle, user_id)
    print(followers_of_user)
    # within those accounts check for words 'parody'
    # or 'fan account' in description

    # face recognition for profile image

    testing = False

# syntax
